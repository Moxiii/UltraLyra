services:
  backend:
    container_name: Backend
    build:
      context: ..
      dockerfile: Docker/Dockerfile.backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ../LyraBack:/app/Backend
      - ~/.m2/repository:/root/.m2/repository
    depends_on:
      mysql:
        condition: service_healthy
    environment:
        - MYSQL_HOST=db
        - JAVA_OPTS=-Dspring.devtools.restart.enabled=true -Dspring.devtools.livereload.enabled=true
        - SPRING_PROFILES_ACTIVE=dev
        - SPRING_REDIS_HOST=redis
        - SPRING_REDIS_PORT=6379
        - SPRING_MONGO_URI=mongodb://mongo:27017/georges
    env_file:
      - ../Docker/.env
    develop:
      watch:
        - action: sync+restart
          path: ../LyraBack/src
          target: ../app/Backend/src
          ignore:
            - "**/target/"
            - "**/node_modules"
        - action: sync+restart
          path: ../JDR-server/application.properties
          target: /app/Backend/application.properties
    networks:
      - app_net

  frontend:
    container_name: Frontend
    build:
      context: ..
      dockerfile: Docker/Dockerfile.frontend
    restart: unless-stopped
    volumes:
      - ../LyraFront:/app/LyraFront
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    ports:
      - "80:80"
      - "8081:8081"
    networks:
      - app_net

  mysql:
    container_name: DataBase
    image: mysql:8.0.19
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "--silent" ]
      interval: 3s
      retries: 5
      start_period: 30s
    networks:
      - app_net
    ports:
      - "3316:3306"
    volumes:
      - db_data:/var/lib/mysql
    environment:
      MYSQL_DATABASE: georges
      MYSQL_USER: georges
      MYSQL_ROOT_PASSWORD: georges
      MYSQL_PASSWORD: root
  redis:
    container_name: redis
    image: redis:6.2.6
    command: [ "redis-server", "--appendonly", "yes" ]
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - app_net

  mongo:
      container_name: mongo
      image: mongo:5.0
      restart: unless-stopped
      ports:
        - "27017:27017"
      networks:
        - app_net
      volumes:
        - mongo_data:/data/db
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    restart: unless-stopped
    ports:
      - "2001:80"  # Accéder à phpMyAdmin via http://localhost:8081
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
    networks:
      - app_net


  rabbitmq:
    container_name: rabbitMQ
    restart: unless-stopped
    image: rabbitmq:4.0-management
    networks:
      - app_net
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
       RABBITMQ_DEFAULT_USER: admin
       RABBITMQ_DEFAULT_PASSWORD: admin

  falcon:
    container_name: falcon_AI
    restart: unless-stopped
    build:
      context: ..
      dockerfile: Docker/Dockerfile.LLM
    env_file:
      - .env
    environment:
      - HUGGING_FACE_HUB_TOKEN=${HUGGING_FACE_TOKEN}
    ports:
      - "8000:8000"
    devices:
      - "/dev/kfd"
      - "/dev/dri"
    ipc: "host"
    profiles:
      - llm

volumes:
  db_data:
  rabbitmq_data:
  mongo_data:

networks:
  app_net:
